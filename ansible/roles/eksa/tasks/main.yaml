- name: "Check if eksctl-anywhere exists"
  ansible.builtin.stat:
    path: /usr/local/bin/eksctl-anywhere
  register: eksa_stat

- name: "Install eksctl-anywhere"
  when: not eksa_stat.stat.exists
  block:
    - name: "Download eksctl-anywhere (Linux amd64)"
      ansible.builtin.get_url:
        url: "https://github.com/aws/eks-anywhere/releases/download/v0.23.1/eksctl-anywhere-v0.23.1-linux-amd64.tar.gz"
        dest: /tmp/eks-a.tar.gz
        mode: '0644'

    - name: "Extract eksctl-anywhere binary"
      ansible.builtin.unarchive:
        src: /tmp/eks-a.tar.gz
        dest: /tmp/eks-a
        remote_src: true
        extra_opts: [--strip-components=0]

    - name: "Move eksctl-anywhere binary to /usr/local/bin"
      ansible.builtin.command:
        cmd: mv /tmp/eks-a/eksctl-anywhere /usr/local/bin/eksctl-anywhere
      args:
        creates: /usr/local/bin/eksctl-anywhere

    - name: "Ensure eksctl-anywhere is executable"
      ansible.builtin.file:
        path: /usr/local/bin/eksctl-anywhere
        mode: '0755'
        state: file

    - name: "Verify eksctl-anywhere binary"
      ansible.builtin.command: file /usr/local/bin/eksctl-anywhere
      register: eksa_file_check

    - name: "Fail if binary is not Linux ELF"
      ansible.builtin.fail:
        msg: "Downloaded eksctl-anywhere is not a valid Linux binary!"
      when: "'ELF 64-bit' not in eksa_file_check.stdout"

- name: "Create EKS-A cluster configuration file"
  ansible.builtin.template:
    src: cluster-config.yaml.j2
    dest: "/home/{{ ansible_user }}/{{ cluster_name }}-cluster.yaml"
    mode: '0644'

- name: "Create EKS-A cluster"
  ansible.builtin.command:
    cmd: "eksctl anywhere create cluster -f /home/{{ ansible_user }}/{{ cluster_name }}-cluster.yaml"
  args:
    creates: "/home/{{ ansible_user }}/.kube/config" # This assumes the kubeconfig is created here
  register: create_cluster_output
  changed_when: create_cluster_output.rc == 0

- name: "Wait for Kubernetes cluster to be ready"
  ansible.builtin.command:
    cmd: "kubectl cluster-info"
  register: cluster_info_output
  until: cluster_info_output.rc == 0 and 'is running at' in cluster_info_output.stdout
  retries: 30
  delay: 10
  changed_when: false